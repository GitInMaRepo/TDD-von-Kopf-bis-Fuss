// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TDD_von_Kopf_bis_Fuss
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class LebowskiSpecialFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "LebowskiSpecial.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("de-DE"), "Lebowski special", @"Der Dude braucht ein Programm, welches auf Basis einer gegebenen Wurfreihe den Endstand für einen Bowling-Spieler berechnet. 
Zu grunde gelegt sind die Regeln für das Standard American Ten-Pin Bowling.

The dude abides:
    
-	Jeder Spieler spielt 10 Durchgeänge
-   In jedem Durchgang hat er maximal 2 Versuche alle Pins abzuräumen.
-   Wenn er es mit zwei Würfen nicht schafft, wird ihm für diesen Durchgang die Summe der geworfenen Pins angeschrieben.
-   Wenn er mit zwei Würfen alle 10 Pins abräumt, dann nennt man das ""Spare"" und
	für diesen Durchgang wird 10 PLUS dem Ergebnis des ersten Wurfs des nächsten Durchgangs angerechnet.
-   Wenn der Spieler mit dem ersten Wurf eines Durchgangs alle 10 Pins abräumt, nennt man dies einen ""Strike"". 
	Der Durchgang ist beendet und er bekommt 10 PLUS dem Ergebnis der nächsten beiden Würfe angeschrieben.
-   Wirft der Spieler im letzten Durchgang einen Strike, so bekommt er noch 2 Nach-Würfe die dazugerechnet werden.
-   Wirft der Spieler im letzten Durchgang einen Spare, so bekommt er noch einen Nachwurf, der dazugerechnet wird.
-   Der Endstand ist die Summe der 10. Durchgänge

The dude doesn't abide:

    Es prüft nicht auf gültige Würfe
    Es prüft nicht auf die korrekte Anzahl von Würfen und Durchgängen
    Es gibt keine Zwischenstände heraus", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Lebowski special")))
            {
                TDD_von_Kopf_bis_Fuss.LebowskiSpecialFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Gutterball")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Lebowski special")]
        public virtual void Gutterball()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Gutterball", ((string[])(null)));
#line 24
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Nummer",
                        "Punkte"});
            table1.AddRow(new string[] {
                        "1",
                        "-"});
            table1.AddRow(new string[] {
                        "2",
                        "-"});
            table1.AddRow(new string[] {
                        "3",
                        "-"});
            table1.AddRow(new string[] {
                        "4",
                        "-"});
            table1.AddRow(new string[] {
                        "5",
                        "-"});
            table1.AddRow(new string[] {
                        "6",
                        "-"});
            table1.AddRow(new string[] {
                        "7",
                        "-"});
            table1.AddRow(new string[] {
                        "8",
                        "-"});
            table1.AddRow(new string[] {
                        "9",
                        "-"});
            table1.AddRow(new string[] {
                        "10",
                        "-"});
            table1.AddRow(new string[] {
                        "11",
                        "-"});
            table1.AddRow(new string[] {
                        "12",
                        "-"});
            table1.AddRow(new string[] {
                        "13",
                        "-"});
            table1.AddRow(new string[] {
                        "14",
                        "-"});
            table1.AddRow(new string[] {
                        "15",
                        "-"});
            table1.AddRow(new string[] {
                        "16",
                        "-"});
            table1.AddRow(new string[] {
                        "17",
                        "-"});
            table1.AddRow(new string[] {
                        "18",
                        "-"});
            table1.AddRow(new string[] {
                        "19",
                        "-"});
            table1.AddRow(new string[] {
                        "20",
                        "-"});
#line 25
testRunner.Given("ein Spieler wirft folgende Würfe", ((string)(null)), table1, "Gegeben sei ");
#line 47
testRunner.When("das Programm die Ausgabe berechnet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Frame",
                        "Punkte"});
            table2.AddRow(new string[] {
                        "1",
                        "0"});
            table2.AddRow(new string[] {
                        "2",
                        "0"});
            table2.AddRow(new string[] {
                        "3",
                        "0"});
            table2.AddRow(new string[] {
                        "4",
                        "0"});
            table2.AddRow(new string[] {
                        "5",
                        "0"});
            table2.AddRow(new string[] {
                        "6",
                        "0"});
            table2.AddRow(new string[] {
                        "7",
                        "0"});
            table2.AddRow(new string[] {
                        "8",
                        "0"});
            table2.AddRow(new string[] {
                        "9",
                        "0"});
            table2.AddRow(new string[] {
                        "10",
                        "0"});
#line 48
testRunner.Then("soll folgendes Ergebnis herauskommen", ((string)(null)), table2, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Just lets go bowling")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Lebowski special")]
        public virtual void JustLetsGoBowling()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Just lets go bowling", ((string[])(null)));
#line 61
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Nummer",
                        "Punkte"});
            table3.AddRow(new string[] {
                        "1",
                        "1"});
            table3.AddRow(new string[] {
                        "2",
                        "2"});
            table3.AddRow(new string[] {
                        "3",
                        "3"});
            table3.AddRow(new string[] {
                        "4",
                        "4"});
            table3.AddRow(new string[] {
                        "5",
                        "5"});
            table3.AddRow(new string[] {
                        "6",
                        "1"});
            table3.AddRow(new string[] {
                        "7",
                        "2"});
            table3.AddRow(new string[] {
                        "8",
                        "3"});
            table3.AddRow(new string[] {
                        "9",
                        "4"});
            table3.AddRow(new string[] {
                        "10",
                        "5"});
            table3.AddRow(new string[] {
                        "11",
                        "1"});
            table3.AddRow(new string[] {
                        "12",
                        "2"});
            table3.AddRow(new string[] {
                        "13",
                        "3"});
            table3.AddRow(new string[] {
                        "14",
                        "4"});
            table3.AddRow(new string[] {
                        "15",
                        "5"});
            table3.AddRow(new string[] {
                        "16",
                        "1"});
            table3.AddRow(new string[] {
                        "17",
                        "2"});
            table3.AddRow(new string[] {
                        "18",
                        "3"});
            table3.AddRow(new string[] {
                        "19",
                        "4"});
            table3.AddRow(new string[] {
                        "20",
                        "5"});
#line 62
testRunner.Given("ein Spieler wirft folgende Würfe", ((string)(null)), table3, "Gegeben sei ");
#line 84
testRunner.When("das Programm die Ausgabe berechnet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Frame",
                        "Punkte"});
            table4.AddRow(new string[] {
                        "1",
                        "3"});
            table4.AddRow(new string[] {
                        "2",
                        "7"});
            table4.AddRow(new string[] {
                        "3",
                        "6"});
            table4.AddRow(new string[] {
                        "4",
                        "5"});
            table4.AddRow(new string[] {
                        "5",
                        "9"});
            table4.AddRow(new string[] {
                        "6",
                        "3"});
            table4.AddRow(new string[] {
                        "7",
                        "7"});
            table4.AddRow(new string[] {
                        "8",
                        "6"});
            table4.AddRow(new string[] {
                        "9",
                        "5"});
            table4.AddRow(new string[] {
                        "10",
                        "9"});
#line 85
testRunner.Then("soll folgendes Ergebnis herauskommen", ((string)(null)), table4, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("The rug")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Lebowski special")]
        public virtual void TheRug()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The rug", ((string[])(null)));
#line 98
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Nummer",
                        "Punkte"});
            table5.AddRow(new string[] {
                        "1",
                        "9"});
            table5.AddRow(new string[] {
                        "2",
                        "-"});
            table5.AddRow(new string[] {
                        "3",
                        "9"});
            table5.AddRow(new string[] {
                        "4",
                        "-"});
            table5.AddRow(new string[] {
                        "5",
                        "9"});
            table5.AddRow(new string[] {
                        "6",
                        "-"});
            table5.AddRow(new string[] {
                        "7",
                        "9"});
            table5.AddRow(new string[] {
                        "8",
                        "-"});
            table5.AddRow(new string[] {
                        "9",
                        "9"});
            table5.AddRow(new string[] {
                        "10",
                        "-"});
            table5.AddRow(new string[] {
                        "11",
                        "9"});
            table5.AddRow(new string[] {
                        "12",
                        "-"});
            table5.AddRow(new string[] {
                        "13",
                        "9"});
            table5.AddRow(new string[] {
                        "14",
                        "-"});
            table5.AddRow(new string[] {
                        "15",
                        "9"});
            table5.AddRow(new string[] {
                        "16",
                        "-"});
            table5.AddRow(new string[] {
                        "17",
                        "9"});
            table5.AddRow(new string[] {
                        "18",
                        "-"});
            table5.AddRow(new string[] {
                        "19",
                        "9"});
            table5.AddRow(new string[] {
                        "20",
                        "-"});
#line 99
testRunner.Given("ein Spieler wirft folgende Würfe", ((string)(null)), table5, "Gegeben sei ");
#line 121
testRunner.When("das Programm die Ausgabe berechnet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Frame",
                        "Punkte"});
            table6.AddRow(new string[] {
                        "1",
                        "9"});
            table6.AddRow(new string[] {
                        "2",
                        "9"});
            table6.AddRow(new string[] {
                        "3",
                        "9"});
            table6.AddRow(new string[] {
                        "4",
                        "9"});
            table6.AddRow(new string[] {
                        "5",
                        "9"});
            table6.AddRow(new string[] {
                        "6",
                        "9"});
            table6.AddRow(new string[] {
                        "7",
                        "9"});
            table6.AddRow(new string[] {
                        "8",
                        "9"});
            table6.AddRow(new string[] {
                        "9",
                        "9"});
            table6.AddRow(new string[] {
                        "10",
                        "9"});
#line 122
testRunner.Then("soll folgendes Ergebnis herauskommen", ((string)(null)), table6, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("League play")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Lebowski special")]
        public virtual void LeaguePlay()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("League play", ((string[])(null)));
#line 135
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Nummer",
                        "Punkte"});
            table7.AddRow(new string[] {
                        "1",
                        "5"});
            table7.AddRow(new string[] {
                        "2",
                        "/"});
            table7.AddRow(new string[] {
                        "3",
                        "5"});
            table7.AddRow(new string[] {
                        "4",
                        "/"});
            table7.AddRow(new string[] {
                        "5",
                        "5"});
            table7.AddRow(new string[] {
                        "6",
                        "/"});
            table7.AddRow(new string[] {
                        "7",
                        "5"});
            table7.AddRow(new string[] {
                        "8",
                        "/"});
            table7.AddRow(new string[] {
                        "9",
                        "5"});
            table7.AddRow(new string[] {
                        "10",
                        "/"});
            table7.AddRow(new string[] {
                        "11",
                        "5"});
            table7.AddRow(new string[] {
                        "12",
                        "/"});
            table7.AddRow(new string[] {
                        "13",
                        "5"});
            table7.AddRow(new string[] {
                        "14",
                        "/"});
            table7.AddRow(new string[] {
                        "15",
                        "5"});
            table7.AddRow(new string[] {
                        "16",
                        "/"});
            table7.AddRow(new string[] {
                        "17",
                        "5"});
            table7.AddRow(new string[] {
                        "18",
                        "/"});
            table7.AddRow(new string[] {
                        "19",
                        "5"});
            table7.AddRow(new string[] {
                        "20",
                        "/"});
            table7.AddRow(new string[] {
                        "21",
                        "5"});
#line 136
testRunner.Given("ein Spieler wirft folgende Würfe", ((string)(null)), table7, "Gegeben sei ");
#line 159
testRunner.When("das Programm die Ausgabe berechnet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Frame",
                        "Punkte"});
            table8.AddRow(new string[] {
                        "1",
                        "15"});
            table8.AddRow(new string[] {
                        "2",
                        "15"});
            table8.AddRow(new string[] {
                        "3",
                        "15"});
            table8.AddRow(new string[] {
                        "4",
                        "15"});
            table8.AddRow(new string[] {
                        "5",
                        "15"});
            table8.AddRow(new string[] {
                        "6",
                        "15"});
            table8.AddRow(new string[] {
                        "7",
                        "15"});
            table8.AddRow(new string[] {
                        "8",
                        "15"});
            table8.AddRow(new string[] {
                        "9",
                        "15"});
            table8.AddRow(new string[] {
                        "10",
                        "15"});
            table8.AddRow(new string[] {
                        "11",
                        "5"});
#line 160
testRunner.Then("soll folgendes Ergebnis herauskommen", ((string)(null)), table8, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("The Creedance")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Lebowski special")]
        public virtual void TheCreedance()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The Creedance", ((string[])(null)));
#line 174
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Nummer",
                        "Punkte"});
            table9.AddRow(new string[] {
                        "1",
                        "x"});
            table9.AddRow(new string[] {
                        "2",
                        "-"});
            table9.AddRow(new string[] {
                        "3",
                        "x"});
            table9.AddRow(new string[] {
                        "4",
                        "-"});
            table9.AddRow(new string[] {
                        "5",
                        "x"});
            table9.AddRow(new string[] {
                        "6",
                        "-"});
            table9.AddRow(new string[] {
                        "7",
                        "x"});
            table9.AddRow(new string[] {
                        "8",
                        "-"});
            table9.AddRow(new string[] {
                        "9",
                        "x"});
            table9.AddRow(new string[] {
                        "10",
                        "-"});
            table9.AddRow(new string[] {
                        "11",
                        "x"});
            table9.AddRow(new string[] {
                        "12",
                        "-"});
            table9.AddRow(new string[] {
                        "13",
                        "x"});
            table9.AddRow(new string[] {
                        "14",
                        "-"});
            table9.AddRow(new string[] {
                        "15",
                        "x"});
            table9.AddRow(new string[] {
                        "16",
                        "-"});
            table9.AddRow(new string[] {
                        "17",
                        "x"});
            table9.AddRow(new string[] {
                        "18",
                        "-"});
            table9.AddRow(new string[] {
                        "19",
                        "x"});
            table9.AddRow(new string[] {
                        "20",
                        "-"});
            table9.AddRow(new string[] {
                        "21",
                        "x"});
            table9.AddRow(new string[] {
                        "22",
                        "x"});
#line 175
testRunner.Given("ein Spieler wirft folgende Würfe", ((string)(null)), table9, "Gegeben sei ");
#line 199
testRunner.When("das Programm die Ausgabe berechnet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Frame",
                        "Punkte"});
            table10.AddRow(new string[] {
                        "1",
                        "30"});
            table10.AddRow(new string[] {
                        "2",
                        "30"});
            table10.AddRow(new string[] {
                        "3",
                        "30"});
            table10.AddRow(new string[] {
                        "4",
                        "30"});
            table10.AddRow(new string[] {
                        "5",
                        "30"});
            table10.AddRow(new string[] {
                        "6",
                        "30"});
            table10.AddRow(new string[] {
                        "7",
                        "30"});
            table10.AddRow(new string[] {
                        "8",
                        "30"});
            table10.AddRow(new string[] {
                        "9",
                        "30"});
            table10.AddRow(new string[] {
                        "10",
                        "30"});
            table10.AddRow(new string[] {
                        "11",
                        "10"});
            table10.AddRow(new string[] {
                        "12",
                        "10"});
#line 200
testRunner.Then("soll folgendes Ergebnis herauskommen", ((string)(null)), table10, "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
